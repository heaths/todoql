// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateTaskInput struct {
	Title      string      `json:"title"`
	Body       *string     `json:"body"`
	Importance *Importance `json:"importance"`
	Due        *time.Time  `json:"due"`
}

type Task struct {
	ID         string     `json:"id"`
	Title      string     `json:"title"`
	Body       *string    `json:"body"`
	Importance Importance `json:"importance"`
	Due        *time.Time `json:"due"`
	Created    time.Time  `json:"created"`
	Updated    time.Time  `json:"updated"`
}

type UpdateTaskInput struct {
	ID         string     `json:"id"`
	Title      string     `json:"title"`
	Body       *string    `json:"body"`
	Importance Importance `json:"importance"`
	Due        *time.Time `json:"due"`
}

type Importance string

const (
	ImportanceLow    Importance = "LOW"
	ImportanceNormal Importance = "NORMAL"
	ImportanceHigh   Importance = "HIGH"
)

var AllImportance = []Importance{
	ImportanceLow,
	ImportanceNormal,
	ImportanceHigh,
}

func (e Importance) IsValid() bool {
	switch e {
	case ImportanceLow, ImportanceNormal, ImportanceHigh:
		return true
	}
	return false
}

func (e Importance) String() string {
	return string(e)
}

func (e *Importance) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Importance(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Importance", str)
	}
	return nil
}

func (e Importance) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
